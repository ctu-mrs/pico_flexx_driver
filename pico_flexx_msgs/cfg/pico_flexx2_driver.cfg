#!/usr/bin/env python
PACKAGE = "pico_flexx_driver"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

use_cases = gen.enum([ gen.const("Long_Range_30FPS",  int_t, 0, "Long range, 30 FPS"),
                       gen.const("Long_Range_15FPS", int_t, 1, "Long range, 15 FPS"),
                       gen.const("Long_Range_10FPS",  int_t, 2, "Long range, 10 FPS"),
                       gen.const("Long_Range_5FPS",  int_t, 3, "Long range, 5 FPS"),
                       gen.const("Short_Range_60FPS",  int_t, 4, "Short range, 60 FPS"),
                       gen.const("Short_Range_30FPS",  int_t, 5, "Short range 30 FPS"),
                       gen.const("Short_Range_15FPS",   int_t, 6, "Short range 15 FPS"),
                       gen.const("Ultra_Short_Range_60FPS",   int_t, 7, "Ultra short range, 60 FPS"),
                       gen.const("Short_Long_Interleaved_30fps_5fps",int_t, 8, "Short/Long interleaved 30/5 FPS"),
                     ], "possible use cases")

exposure_modes = gen.enum([ gen.const("MANUAL", int_t, 0, "Manual exposure mode"),
                            gen.const("AUTOMATIC", int_t, 1, "Automatic exposure mode")
                          ], "Possible exposure modes")

# Royale allows to set different filter levels. Internally these represent
# different configurations of the processing pipeline.
filter_levels = gen.enum([ gen.const("Binning_1_Basic", int_t, 9, "NG pipeline : basic kernels with binning size 1"),
                           gen.const("Binning_2_Basic", int_t, 10, "NG pipeline : basic kernels with binning size 2"),
                           gen.const("Binning_3_Basic", int_t, 11, "NG pipeline : basic kernels with binning size 3"),
                           gen.const("Binning_4_Basic", int_t, 12, "NG pipeline : basic kernels with binning size 4"),
                           gen.const("Binning_8_Basic", int_t, 13, "NG pipeline : basic kernels with binning size 8"),
                           gen.const("Binning_10_Basic", int_t, 14, "NG pipeline : basic kernels with binning size 10"),
                           gen.const("Binning_1_Efficiency", int_t, 15, "NG pipeline : efficiency kernels with binning size 1"),
                           gen.const("Binning_2_Efficiency", int_t, 16, "NG pipeline : efficiency kernels with binning size 2"),
                           gen.const("Binning_3_Efficiency", int_t, 17, "NG pipeline : efficiency kernels with binning size 3"),
                           gen.const("Binning_4_Efficiency", int_t, 18, "NG pipeline : efficiency kernels with binning size 4"),
                           gen.const("Binning_8_Efficiency", int_t, 19, "NG pipeline : efficiency kernels with binning size 8"),
                           gen.const("Binning_10_Efficiency", int_t, 20, "NG pipeline : efficiency kernels with binning size 10"),
                           gen.const("Fast1", int_t, 21, "FAST pipeline"),
                          ], "Possible filter levels")

gen.add("use_case",               int_t,    0x01, "Use cases for the sensor", 0, 0, 8, edit_method=use_cases)
gen.add("exposure_mode",          int_t,    0x02, "Exposure mode for the sensor", 0, 0, 1, edit_method=exposure_modes)
gen.add("exposure_mode_stream2",  int_t,    0x04, "Exposure mode for the sensor (stream 2)", 0, 0, 1, edit_method=exposure_modes)
gen.add("exposure_time",          int_t,    0x08, "Exposure time", 1000, 1, 2000)
gen.add("exposure_time_stream2",  int_t,    0x10, "Exposure time (stream 2)", 1000, 1, 2000)
gen.add("min_confidence",         int_t,    0x20, "Min confidence to use point", 1, 0, 255)
gen.add("range_factor",           double_t, 0x40, "Range of factor times standard deviation arround mean", 2.0, 0.0, 7.0)
gen.add("filter_level",           int_t,    0x80, "Filter level", 9, 0, 256, edit_method=filter_levels)

exit(gen.generate(PACKAGE, "pico_flexx2_driver", "pico_flexx2_driver"))
